{
    "version": "https://jsonfeed.org/version/1",
    "title": "Category",
    "description": "",
    "home_page_url": "https://plumefox.github.io",
    "items": [
        {
            "id": "https://plumefox.github.io/[object%20Object]/typora+chevereto%E5%9B%BE%E5%BA%8A/",
            "url": "https://plumefox.github.io/[object%20Object]/typora+chevereto%E5%9B%BE%E5%BA%8A/",
            "title": "关于自建图床那些事──typora+cheverto图床",
            "date_published": "2021-12-14T15:55:46.335Z",
            "content_html": "<h1 id=\"关于自建图床那些事typoracheverto图床\"><a class=\"markdownIt-Anchor\" href=\"#关于自建图床那些事typoracheverto图床\">#</a> 关于自建图床那些事──typora+cheverto 图床</h1>\n<p>偶然间发现 typora 可以使用规则，将本地或者网络图片上传到图床。查了些资料，发现了开源的图床 chevereto。正好手上有个闲置的服务器，<s>于是开始了快乐的踩坑之旅</s></p>\n<h3 id=\"一些参考信息\"><a class=\"markdownIt-Anchor\" href=\"#一些参考信息\">#</a> 一些参考信息：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92My1kb2NzLmNoZXZlcmV0by5jb20vYXBpLw==\">API 官方文档</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5odWIuZG9ja2VyLmNvbS9yL2xpbnV4c2VydmVyL2NoZXZlcmV0bw==\">linuxserver/chevereto - Docker Image | Docker Hub</span></p>\n<p>环境信息：Linux VM-16-5-centos 4.18.0-193.28.1.el8_2.x86_64 #1 SMP Thu Oct 22 00:20:22 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</p>\n<h3 id=\"配置流程\"><a class=\"markdownIt-Anchor\" href=\"#配置流程\">#</a> 配置流程：</h3>\n<h4 id=\"1-服务器安装docker\"><a class=\"markdownIt-Anchor\" href=\"#1-服务器安装docker\">#</a> 1. 服务器安装 docker</h4>\n<p>​\t可选：docker-compose</p>\n<h4 id=\"2-配置数据库及云服务器端口放开\"><a class=\"markdownIt-Anchor\" href=\"#2-配置数据库及云服务器端口放开\">#</a> 2. 配置数据库及云服务器端口放开</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql -u -root -p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>use mysql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>create database chevereto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CREATE <span class=\"token environment constant\">USER</span> <span class=\"token string\">'usernmae'</span>@<span class=\"token string\">'%'</span> IDENTIFIED BY <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GRANT ALL ON chevereto.* TO <span class=\"token string\">'chevereto'</span>@<span class=\"token string\">'%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>新建了一个数据库 chevereto，用于后续配置。</p>\n<p>其中 % 为通配符，表示任意来源都可以登录该帐号。</p>\n<p>同时在云服务器防火墙策略放开 3306 端口</p>\n<h4 id=\"3-启动镜像\"><a class=\"markdownIt-Anchor\" href=\"#3-启动镜像\">#</a> 3. 启动镜像</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull linuxserver/chevereto</pre></td></tr></table></figure><p>启动命令：服务器将对应端口放开</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  --name<span class=\"token operator\">=</span>chevereto <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  -e <span class=\"token assign-left variable\">PUID</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  -e <span class=\"token assign-left variable\">PGID</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  -p <span class=\"token number\">80</span>:80 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  -p <span class=\"token number\">443</span>:443 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  -v /data/chevereto/config:/config <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  -v /data/chevereto/data:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  -m 150m<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  --restart unless-stopped <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  linuxserver/chevereto</pre></td></tr></table></figure><p>-p 表示 宿主机：docker 端口 自行调整映射端口</p>\n<p>-v 为挂载地址 需提前新建</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /data/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> cheverto</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> cheverto/config</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> cheverto/data</pre></td></tr></table></figure><h4 id=\"4-页面配置\"><a class=\"markdownIt-Anchor\" href=\"#4-页面配置\">#</a> 4. 页面配置</h4>\n<p>正常情况下，打开之前映射的网址，能看到数据库配置页面，将之前设置好的数据库和密码输入，同时下一步配置管理员信息</p>\n<p>在 dashboard 可开启私人模式</p>\n<h4 id=\"5-api配置\"><a class=\"markdownIt-Anchor\" href=\"#5-api配置\">#</a> 5. API 配置</h4>\n<p>进入 dashboard-&gt;settings-&gt;API 页面进行设置</p>\n<p><img data-src=\"http://110.40.154.106:8888/images/a02ef3b0bc19.png\" alt=\"Clipboard - 2021-12-15 00.27.20\"></p>\n<p>​\t<strong>采用 post 方法将图片进行上传</strong></p>\n<h5 id=\"数据格式\"><a class=\"markdownIt-Anchor\" href=\"#数据格式\">#</a> 数据格式:</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Your API KEY\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"source\"</span><span class=\"token punctuation\">:</span> imagesource<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"action\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"upload\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"format\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"json\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"url拆解\"><a class=\"markdownIt-Anchor\" href=\"#url拆解\">#</a> url 拆解：</h5>\n<p>分为四个部分</p>\n<ol>\n<li>\n<p>ip 地址部分 <code>http://mysite.com/api/1/upload/?</code></p>\n</li>\n<li>\n<p>api 部分 <code>key=12345</code></p>\n</li>\n<li>\n<p>图片位置 <code>source=http://somewebsite/someimage.jpg</code>  可以使用网络位置</p>\n<p>本地文件需要 base64 编码</p>\n</li>\n<li>\n<p>json 格式 <code>format=json</code>  不可少</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://mysite.com/api/1/upload/?key=12345source=http://somewebsite/someimage.jpg&amp;format=json\"</span></pre></td></tr></table></figure><h5 id=\"python-urllib-post\"><a class=\"markdownIt-Anchor\" href=\"#python-urllib-post\">#</a> python urllib post：</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">upLoadImage</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    filename <span class=\"token operator\">=</span> tobase64<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    data<span class=\"token punctuation\">[</span><span class=\"token string\">\"source\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> filename</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    test <span class=\"token operator\">=</span> parse<span class=\"token punctuation\">.</span>urlencode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    req <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>data <span class=\"token operator\">=</span> test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    page <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    page <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    response_json <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response_json<span class=\"token punctuation\">[</span><span class=\"token string\">\"image\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"6-typora配置\"><a class=\"markdownIt-Anchor\" href=\"#6-typora配置\">#</a> 6. typora 配置</h4>\n<p>偏好设置 -&gt; 图像 -&gt; 上传服务设定：选择 custom command</p>\n<p>输入：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 post.py</pre></td></tr></table></figure><p>点击验证图片上传选项</p>\n<p><img data-src=\"http://110.40.154.106:8888/images/786abd3945aa.png\" alt=\"Clipboard - 2021-12-15 00.38.20\"></p>\n<p>显示上传成功，同时将插入图片时的规则中：对本地应用和对网络位置应用勾上。这样每次加入图片时，typora 都会将图片上传并且替换成图床上的地址。</p>\n",
            "tags": []
        },
        {
            "id": "https://plumefox.github.io/[object%20Object]/win10/",
            "url": "https://plumefox.github.io/[object%20Object]/win10/",
            "title": "虚拟机win10优化",
            "date_published": "2021-11-16T08:56:27.145Z",
            "content_html": "<p>主要目标：降低虚拟机负载</p>\n<h2 id=\"1关闭windows自动更新与windows-defender\"><a class=\"markdownIt-Anchor\" href=\"#1关闭windows自动更新与windows-defender\">#</a> 1. 关闭 windows 自动更新与 windows defender</h2>\n<p>运行──gpedit.msc</p>\n<p>计算机配置 ----- 管理模板 -----Windows 组件 ----Microsoft Defender 防病毒。</p>\n<p>勾选 “已启用” 选项，就可以关闭 Windows defender</p>\n<p>计算机配置 ----- 管理模板 -----Windows 组件 ----windows 更新</p>\n<h2 id=\"2关闭家庭组\"><a class=\"markdownIt-Anchor\" href=\"#2关闭家庭组\">#</a> 2. 关闭家庭组</h2>\n<p>此电脑──管理──服务──HomeGroup Listener 和 HomeGroupProvider</p>\n<h2 id=\"3关闭特效\"><a class=\"markdownIt-Anchor\" href=\"#3关闭特效\">#</a> 3. 关闭特效</h2>\n<p>右键 此电脑 — 属性──高级系统设置</p>\n<p>仅保留平滑 + 速览</p>\n<h2 id=\"4win10开机自动登录\"><a class=\"markdownIt-Anchor\" href=\"#4win10开机自动登录\">#</a> 4.win10 开机自动登录</h2>\n<p>桌面左下角 win 图标右键 — 运行 ---- 运行框输入 — netplwiz 确定</p>\n<p>勾点掉</p>\n",
            "tags": []
        },
        {
            "id": "https://plumefox.github.io/[object%20Object]/pwntools_Usage/",
            "url": "https://plumefox.github.io/[object%20Object]/pwntools_Usage/",
            "title": "pwntools用法",
            "date_published": "2021-11-16T08:55:34.202Z",
            "content_html": "<p>#x86  ebp  e<br>\n#x64  RDI,RSI,RDX,RCX,R8,R9<br>\n#coding:utf-8</p>\n<p>context(os=‘linux’,arch=‘amd64’)<br>\ncontext(arch=‘amd32’)<br>\nshellcode=asm(<span class=\"exturl\" data-url=\"aHR0cDovL3NoZWxsY3JhZnQuc2g=\">shellcraft.sh</span>())<br>\ncontext.log_level = ‘DEBUG’</p>\n<p>from pwn import *</p>\n<p>s = remote(‘xxx’,xxx)<br>\ns = process(’./xxx’)<br>\ngdb.attach(s)</p>\n<p>elf = ELF(’./xxxx’)<br>\nplt = elf.plt[‘xxx’]<br>\ngot = elf.got[‘xxx’]<br>\nsymbols = elf.symbols[’’]</p>\n<p>addr = int(s.recvuntil(’\\n’), 16)</p>\n<p>#format<br>\npayload = “aaaa_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x”<br>\npayload =&quot;%85c%7$n&quot;</p>\n<p>s.recv()<br>\ns.recvuntil(‘xxx’)<br>\ns.send()<br>\ns.sendline()<br>\ns.interactive()<br>\ns.close()</p>\n<p>raw_input(’#’)</p>\n<p>#DynELF<br>\nd = DynELF(leak, elf = elf)<br>\ndef leak(addr):<br>\npayload = ‘’<br>\npayload += ‘A’*padding                #padding<br>\npayload += p32 (write_addr)      #调用 write<br>\npayload += p32 (start_addr)        #write 返回到 start<br>\npayload += p32 (1)                    #write 第一个参数 fd<br>\npayload += p32 (addr)               #write 第二个参数 buf<br>\npayload += p32 (8)                    #write 第三个参数 size<br>\ns.sendline(payload)<br>\ncontent = s.recv()[:8]<br>\nprint(&quot;%#x -&gt; %s&quot; %(addr, (content or ‘’).encode(‘hex’)))<br>\nreturn content</p>\n<p>def leak(addr):<br>\npayload2leak_addr = “<strong><strong>” + pack(addr) + “</strong></strong>”<br>\ns.send(payload2leak_addr)<br>\ndata = s.recv()<br>\nreturn data</p>\n<p>d = DynELF(leak, pointer = pointer_into_ELF_file, elf = ELFObject) system_addr = d.lookup(“system”, libc)</p>\n<p>system_addr = d.lookup(‘system’, ‘libc’)</p>\n",
            "tags": []
        },
        {
            "id": "https://plumefox.github.io/[object%20Object]/install-dvta/",
            "url": "https://plumefox.github.io/[object%20Object]/install-dvta/",
            "title": "dvta环境搭建",
            "date_published": "2021-11-16T08:55:18.960Z",
            "content_html": "<p>**<br>\n**</p>\n<p><img data-src=\"resources/494CA40150CA599D634F945B8661477E.png\" alt></p>\n<hr>\n<p>** 客户端：**windows10、DVTA（下载地址：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlY3Z1bHR1cmUvZHZ0YSVFRiVCQyU4OQ==\">https://github.com/secvulture/dvta）</span></p>\n<p><img data-src=\"resources/2B14851FC8E244040454549663D461D5.jpg\" alt></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS00OXNxNjZoY3FhMTU0Yi5uZXQ=\">需要安装.net</span> framework4.5 才能正常运行。</p>\n<p>** 服务端：**windows10、 SQL Server 2008 并设置账号密码为 sa/p@ssw0rd、FTP 服务，服务器地址需为 192.168.56.110</p>\n<hr>\n<hr>\n<p><strong>安装包准备：</strong></p>\n<p><strong>1.DVTA 安装包</strong></p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovLzIubmV0\">2.net</span> framework 4.5</strong></p>\n<p><strong>2.sqlserver 安装包</strong></p>\n<p><strong>3.</strong></p>\n<p>**<br>\n**</p>\n<p>**<br>\n**</p>\n<p><strong>服务端配置步骤：</strong></p>\n<p>第一步安装 SQL Server 2008:</p>\n<p>安装 SQL Server 2008 需要先安装.net3.5，下载地址：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9MjE=\">https://www.microsoft.com/en-us/download/details.aspx?id=21</span></p>\n<p>按照网上的教程，SQL Server 2008 的下载地址链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTFVYzJhbG9yanNBa0VqMXQwZHhZM2c=\">https://pan.baidu.com/s/11Uc2alorjsAkEj1t0dxY3g</span></p>\n<p>提取码：40bq</p>\n<p>只用网盘中的第一个。</p>\n<p><img data-src=\"resources/34BFD8E55E7929A65B529F43445CAA14.png\" alt></p>\n<p>双击运行</p>\n<p><img data-src=\"resources/43400AFDBB2D497EB969EDD4E225E403.png\" alt></p>\n<p><img data-src=\"resources/E8A4E78791400E7DCBDA0FA203E07990.jpg\" alt></p>\n<p><img data-src=\"resources/5835E1B246C35FB737392F3935B77BA0.jpg\" alt></p>\n<p><img data-src=\"resources/57FCE37615FD1723D996A56EB2229128.jpg\" alt></p>\n<p><img data-src=\"resources/C29899A696B98C01B20F1F2C9BC23A6A.png\" alt></p>\n<p><img data-src=\"resources/66234BCC55C3EE4FBE1BD938F146A8C9.jpg\" alt></p>\n<p><img data-src=\"resources/66B0F452813C0785866DD52790A9FE5F.jpg\" alt></p>\n<p><img data-src=\"resources/76FBA720EE1BE1023BEA7F54D3091C39.jpg\" alt></p>\n<p><img data-src=\"resources/7D5B0805ED13209B5BEA5BE488B7D640.jpg\" alt>选择 system</p>\n<p><img data-src=\"resources/D3BF4A256DAA59300F60C4DA961F006A.jpg\" alt></p>\n<p><img data-src=\"resources/A13F25C932224922FBED1AC075CF3DF4.png\" alt></p>\n<p><img data-src=\"resources/2C8A42FF82E16C3C04C4EADA127FC8F8.jpg\" alt></p>\n<p>此处的密码为 p@ssw0rd</p>\n<p><img data-src=\"resources/25B6C97888586AE9F592F9A27B3104AF.jpg\" alt></p>\n<p><img data-src=\"resources/A192AD496B2C51D3B94602B359C70848.png\" alt></p>\n<p><img data-src=\"resources/2C9A67629CDE7034F3C6429AB8432A10.jpg\" alt></p>\n<p><img data-src=\"resources/1020005BB651C7CF274E9FC73B98E8A1.png\" alt></p>\n<p><img data-src=\"resources/18F04B2238B2F9A30510558EA29DB205.png\" alt></p>\n<p><img data-src=\"resources/A1A9A295B9F0D53415591223F507BF2D.jpg\" alt></p>\n<p><strong>第二步安装管理工具</strong>，下载地址：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvc3FsL3NzbXMvZG93bmxvYWQtc3FsLXNlcnZlci1tYW5hZ2VtZW50LXN0dWRpby1zc21zP3ZpZXc9c3FsLXNlcnZlci0yMDE3\">https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017</span></p>\n<p>一直点下一步即可，安装过后如图：</p>\n<p><img data-src=\"resources/42BAD5B09B0489AA9197EDD2F2C23301.png\" alt></p>\n<p><strong>数据库中新建 DVTA 库：</strong></p>\n<p><img data-src=\"resources/E8C67B0020BCDCDEDFB29C32B60617D8.png\" alt></p>\n<p>建表名为 users 和 expenses 两个表：</p>\n<p><img data-src=\"resources/936160E1EC5C394906E2CE3A5CFAD0AE.png\" alt></p>\n<p><img data-src=\"resources/4E14783B08935B6355CEC9ED81323CA4.png\" alt></p>\n<p>user 表中添加数据：</p>\n<p><img data-src=\"resources/04E622701E264E3ACD0D818BD06832DE.png\" alt></p>\n<p>第三部：允许 SQL Server 远程访问：</p>\n<p>再次进入 ssms，右键选择 “属性”：</p>\n<p><img data-src=\"resources/5F606BF25BCE11FD2E8ACDBD73F5E625.png\" alt></p>\n<p>左侧选择 “安全性”，确保 “SQL Server 和 Windows 身份验证模式” 开启：</p>\n<p><img data-src=\"resources/5931AE6A33370ABFAB6AD5A5813B24E4.png\" alt></p>\n<p>选择 “连接”，勾选 “允许远程连接此服务器”，然后点 “确定”：</p>\n<p><img data-src=\"resources/4711659E73AFA70635F8E6DFB43D9F90.png\" alt></p>\n<p>展开 “安全性”，登录名 “sa”，右键选择 “属性”：</p>\n<p><img data-src=\"resources/DA3A474FE9742110E79783CE5ECECDA5.png\" alt></p>\n<p>左侧选择 “常规”，右侧选择 “SQL Server 身份验证”，并设置密码 p@ssw0rd:</p>\n<p><img data-src=\"resources/67EC13C7AF291CE8A283E2ACB1A46F66.png\" alt></p>\n<p>右击数据库选择 “方面”：</p>\n<p><img data-src=\"resources/C107F19E0DB61253369C21D7C6F77586.png\" alt></p>\n<p>在右侧的方面下拉框中选择 “服务器配置”；将 “RemoteAccessEnabled” 属性设为 “True”，点 “确定”：</p>\n<p><img data-src=\"resources/8CB51C7433856EC790D254CB9D654CDB.png\" alt></p>\n<p>下面开始配置 SSCM，</p>\n<p><img data-src=\"resources/21BA505FFD4D49DC1C717AAF75950A36.png\" alt></p>\n<p>选中左侧的 “SQL Server 服务”，确保右侧的 “SQL Server” 以及 “SQL Server Browser” 正在运行：</p>\n<p><img data-src=\"resources/CFE90740C177C743FFFC9861F2619847.png\" alt></p>\n<p>注：如果 SQL Server Browser 为灰色不能启动，从 services.msc 中将 SQL Server Browser 右击属性打开，启动模式为 手动或者自动，然后就能启动该服务了。</p>\n<p>在左侧选择 sql server 网络配置节点下的 sqlexpress 的协议，在右侧的 TCP/IP 默认是 “否”，右键启用或者双击打开设置面板将其修改为 “是”：</p>\n<p><img data-src=\"resources/8D1357045EA0ED536BFEAF912506A8C4.png\" alt></p>\n<p><img data-src=\"resources/AE90B5E0C100E75B2E4DDCD6FAC2AC9F.png\" alt></p>\n<p>选择 “IP 地址” 选项卡，设置监听端口为 1433：</p>\n<p><img data-src=\"resources/B13F556A986B101501B1BD608544C9B7.png\" alt></p>\n<p>将 &quot;客户端协议&quot; 的 &quot;TCP/IP&quot; 也修改为 “Enabled”</p>\n<p>配置完成，重新启动 SQL Server 2008。此时应该可以使用了。</p>\n<p><img data-src=\"resources/10F86409C381D78098018E2550A74E93.png\" alt></p>\n<p><strong>现在配置 FTP 服务：</strong></p>\n<p>1、打开控制面板 -&gt; 程序和功能 -&gt; 启用或关闭 windows 功能然后如图：</p>\n<p><img data-src=\"resources/893E8DF5BA5191ABB3DEA0D27ADF5F9E.jpg\" alt></p>\n<p>2、配置 FTP 用户：我的电脑 -&gt; 右击点击管理 -&gt; 本地用户和组</p>\n<p>添加用户名：dvta 密码：p@ssw0rd 的用户。</p>\n<p><img data-src=\"resources/531CB2EA11C9D41A45192C59124C7201.png\" alt></p>\n<p>3、添加 FTP 站点：Windows10 搜索框搜索 IIS 按回车进入到下方界面：</p>\n<p>在网站右击 -&gt; 添加 ftp 站点，如图：</p>\n<p><img data-src=\"resources/7E67958236452E15C1D3826C3129E6B5.png\" alt></p>\n<p><img data-src=\"resources/722B17AB4EE20A5F97A72EBE8D3F4470.png\" alt></p>\n<p><img data-src=\"resources/722B17AB4EE20A5F97A72EBE8D3F4470.png\" alt></p>\n<p>到此点击 “完成”，配置 FTP 服务也完成了。</p>\n<p><strong>配置两个虚拟机的网卡，服务器 IP 地址要为 192.168.56.110，这是代码中</strong></p>\n<p><strong>写死的。</strong></p>\n<p>我们返回客户端的 DVTA 中，使用 admin/admin123 可以登录，说明配置成功。</p>\n<p><img data-src=\"resources/45832274740B06DAD1033BA1E33AC572.png\" alt></p>\n<p><img data-src=\"resources/E963688F266841712FD4C4223DE1CC85.png\" alt></p>\n<p><img data-src=\"resources/C59B41D5138805BDC402FD33DEED73B7.png\" alt></p>\n<p>之后我们就可以在通过这个客户端进行各种渗透测试。</p>\n",
            "tags": []
        },
        {
            "id": "https://plumefox.github.io/[object%20Object]/miral%E9%AA%B0%E5%A8%98%E9%85%8D%E7%BD%AE/",
            "url": "https://plumefox.github.io/[object%20Object]/miral%E9%AA%B0%E5%A8%98%E9%85%8D%E7%BD%AE/",
            "title": "miral骰娘配置",
            "date_published": "2021-11-16T08:52:53.300Z",
            "content_html": "<h3 id=\"1服务器安装docker\"><a class=\"markdownIt-Anchor\" href=\"#1服务器安装docker\">#</a> 1. 服务器安装 docker<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></h3>\n<pre><code class=\"language-sh\">yum install docker\n</code></pre>\n<h3 id=\"2启动docker\"><a class=\"markdownIt-Anchor\" href=\"#2启动docker\">#</a> 2 启动 docker</h3>\n<pre><code class=\"language-sh\">sudo docker run --rm -d -it suhuiw4123/mirai-dice\n</code></pre>\n<h3 id=\"3docker内部配置\"><a class=\"markdownIt-Anchor\" href=\"#3docker内部配置\">#</a> 3.docker 内部配置</h3>\n<p>登录</p>\n<pre><code class=\"language-sh\">docker ps\ndocker attach id\n###miral信息\nlogin qq帐号 密码 \n#将滑块验证修改为二维码验证\n#手动把网址中的verify (https://ti.qq.com/safe/verify?…) 改成\n#qrcode(https://ti.qq.com/safe/qrcode?…) \nautologin add QQ账号 密码 \nautologin setConfig QQ账号 protocol 协议名称 #协议名可选 ANDROID_PHONE, ANDROID_PAD或ANDROID_WATCH\n</code></pre>\n<h3 id=\"4提交修改\"><a class=\"markdownIt-Anchor\" href=\"#4提交修改\">#</a> 4. 提交修改</h3>\n<pre><code class=\"language-sh\">#ctrl+p+q退出容器\ndocker ps\ndocker commit id\n</code></pre>\n<h3 id=\"5重启docker\"><a class=\"markdownIt-Anchor\" href=\"#5重启docker\">#</a> 5. 重启 docker</h3>\n<pre><code class=\"language-sh\">docker restart id\n</code></pre>\n<h3 id=\"传输文件\"><a class=\"markdownIt-Anchor\" href=\"#传输文件\">#</a> 传输文件</h3>\n<pre><code class=\"language-sh\">scp /path/filename username@servername:/path/\nscp /root/ root@ip:/home/container/dice/Dice[DATA]/plugin/\n\nscp -r local_dir username@servername:remote_dir\ndocker cp 本地文件的路径 container_id:romote_dir\n\n</code></pre>\n<pre><code class=\"language-sh\">docker exec -it id /bin/bash\ndocker exec -it --user root id /bin/bash\n\ndocker run --env DICE_WEBUI_PORT=8000 --env DICE_WEBUI_ALLOW_INTERNET_ACCESS=1 --rm -itd -p 8000:8000 localhost/demo#环境辩论注入+映射8000到宿主机8000 后台运行\ndocker run -itd --privileged=true container\n</code></pre>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5rb2tvbmEudGVjaC9kLzQ0OC1taXJhaS1kaWNlLXhpYS16YWktamktZGEtamlhbi16aGktbmFuLXp1aS1ob3UtZ2VuZy14aW4tMjAyMTA5MTk=\">https://forum.kokona.tech/d/448-mirai-dice-xia-zai-ji-da-jian-zhi-nan-zui-hou-geng-xin-20210919</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": []
        },
        {
            "id": "https://plumefox.github.io/[object%20Object]/mac-hdmi/",
            "url": "https://plumefox.github.io/[object%20Object]/mac-hdmi/",
            "title": "mac外接2k显示器开启hdpi",
            "date_published": "2021-11-16T08:52:39.400Z",
            "content_html": "<pre><code class=\"language-sh\">bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi-zh.sh)&quot;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://plumefox.github.io/[object%20Object]/git/",
            "url": "https://plumefox.github.io/[object%20Object]/git/",
            "title": "git基本操作",
            "date_published": "2021-11-16T08:52:30.690Z",
            "content_html": "<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git  config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name  <span class=\"token string\">'username'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git  config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">'email'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git config <span class=\"token operator\">--</span>list</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cd <span class=\"token operator\">~</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.ssh</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>more id_rsa<span class=\"token punctuation\">.</span>pub</pre></td></tr></table></figure><pre><code class=\"language-sh\">cd ./project_name\n\ngit init #初始化仓库\ngit add test.md #增加文件\ngit status #查看提交和修改状态\ngit log --oneline #精简log输出\ngit branch dev1 #新分支\ngit checkout dev1 #切换到dev1\ngit branch #查看所有分支\n\ngit commit test.md -m &quot;helloworld&quot; #提交+注释\ngit push --set-upstream origin dev1 #远程同步\ngit reset --hard HEAD^ #回滚上一分支\ngit reset --hard 59019b4 #回滚到指定分支\n\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://plumefox.github.io/[object%20Object]/hello-world/",
            "url": "https://plumefox.github.io/[object%20Object]/hello-world/",
            "title": "Hello World",
            "date_published": "2021-11-16T06:31:47.175Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}